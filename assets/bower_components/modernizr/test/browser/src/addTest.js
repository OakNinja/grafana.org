describe("addTest",function(){var t,e,n,i,r,o,s;before(function(t){(s=requirejs.config({context:Math.random().toString().slice(2),baseUrl:"../src",paths:{cleanup:"../test/cleanup",sinon:"../test/js/lib/sinon"}}))(["cleanup","sinon"],function(e,n){r=e,o=n,t()})}),beforeEach(function(r){t={},n={_q:[],_config:{}},e=o.spy(),define("ModernizrProto",[],function(){return t}),define("Modernizr",[],function(){return n}),define("setClasses",[],function(){return e}),define("package",[],function(){return{}}),s(["addTest"],function(t){i=t,r()})}),afterEach(function(){s.undef("ModernizrProto"),s.undef("setClasses"),s.undef("Modernizr"),s.undef("package"),s.undef("addTest")}),describe("setup",function(){it("adds an object for test listeners",function(){expect(t._l).to.be.an("object")}),it("should define the `ModernizrProto._trigger` function",function(){expect(t._trigger).to.be.an("function")}),it("should push the Modernizr.addTest definition to the `_q`",function(){expect(n._q).to.have.length(1),expect(n._q[0]).to.be.a("function")}),it("should define Modernizr.addTest at the end of the _q",function(){n._q[0](),expect(t.addTest).to.be(i)})}),describe("Modernizr.on",function(){var e=function(){};it("keeps track of requests",function(){t.on("fakeDetect",e),expect(t._l.fakeDetect).to.be.an("array"),expect(t._l.fakeDetect[0]).to.be(e)}),it("does not recreate the queue with duplicate requests",function(){t.on("fakeDetect",e),t.on("fakeDetect",e),expect(t._l.fakeDetect.length).to.be(2)}),it("triggers results if the detect already ran",function(i){n.fakeDetect="fake",n._trigger=o.spy(),t.on("fakeDetect",e),setTimeout(function(){expect(n._trigger.calledOnce).to.be(!0),expect(n._trigger.calledWith("fakeDetect",n.fakeDetect)).to.be(!0),i()},0)})}),describe("Modernizr._trigger",function(){it("skips the callback if it does not exist",function(){expect(function(){t._trigger("fakeDetect")}).to.not.throwError()}),it("runs the listener calledback if it does exist",function(e){var n=o.spy();t.on("fakeDetect",n),t._trigger("fakeDetect","fakeRes"),setTimeout(function(){expect(n.calledOnce).to.be(!0),e()})}),it("deletes the listener after it runs",function(e){t.on("fakeDetect",function(){}),expect(t._l.fakeDetect).to.be.an("array"),t._trigger("fakeDetect","fakeRes"),setTimeout(function(){expect(t._l.fakeDetect).to.be(void 0),e()})})}),describe("Modernizr.addTest",function(){beforeEach(function(){n._trigger=o.spy(),n._trigger=o.spy(),expect(n.fakedetect).to.be(void 0),expect(n.fake).to.be(void 0),expect(n.detect).to.be(void 0)}),it("sets the proper bool on the Modernizr object with a function",function(){i("fakedetect",function(){return!0}),expect(n.fakedetect).to.be(!0)}),it("sets the proper bool on the Modernizr object with a bool",function(){i("fakedetect",!1),expect(n.fakedetect).to.be(!1)}),it("does not cast to a bool on the Modernizr object with a truthy value",function(){i("fakedetect",function(){return 100}),expect(n.fakedetect).to.be(100)}),it("sets a true class for a true value",function(){i("fakedetect",function(){return 100}),expect(e.callCount).to.be(1),expect(e.calledWith(["fakedetect"])).to.be(!0)}),it("sets a truthy class for a truthy value",function(){i("fakedetect",function(){return 100}),expect(e.callCount).to.be(1),expect(e.calledWith(["fakedetect"])).to.be(!0)}),it("sets a negative class for a false value",function(){i("fakedetect",function(){return!1}),expect(e.callCount).to.be(1),expect(e.calledWith(["no-fakedetect"])).to.be(!0)}),it("sets a negative class for a falsey value",function(){i("fakedetect",function(){return void 0}),expect(e.callCount).to.be(1),expect(e.calledWith(["no-fakedetect"])).to.be(!0)}),it("does not cast to a bool on the Modernizr object with a falsy value",function(){i("fakedetect",function(){return void 0}),expect("fakedetect"in n).to.be(!0),expect(n.fakedetect).to.be(void 0)}),it("forces detect names are lowercase",function(){i("FaKeDeTeCt",!0),expect(n.fakedetect).to.be(!0)}),it("supports nested properties with a bool base",function(){i("fake",new Boolean(!0)),i("fake.detect",!0),expect(n.fake).to.be.an("object"),expect(n.fake.detect).to.be(!0)}),it("supports nested properties",function(){i("fake",!0),i("fake.detect",!0),expect(n.fake).to.be.an("object"),expect(n.fake.detect).to.be(!0)}),it("does not overwrite values once they are set",function(){i("fakeDetect",!1),expect(n.fakedetect).to.be(!1),expect(n._trigger.calledOnce).to.be(!0),i("fakeDetect",!0),expect(n.fakedetect).to.be(!1),expect(n._trigger.calledOnce).to.be(!0)}),it("allows feature to be an object of features",function(){i({fake:!0,detect:!1}),expect(n.fake).to.be(!0),expect(n.detect).to.be(!1),expect(e.callCount).to.be(2),expect(e.calledWith(["fake"])).to.be(!0),expect(e.calledWith(["no-detect"])).to.be(!0)}),it("properly filters out monkey patched object properties",function(){var t=function(){};Object.prototype.MOD_FAKE_VALUE=t;var r={detect:!1};expect(r.MOD_FAKE_VALUE).to.be(t),i(r),delete Object.prototype.MOD_FAKE_VALUE,expect(n.MOD_FAKE_VALUE).to.be(void 0),expect(n.mod_fake_value).to.be(void 0),expect(n.detect).to.be(!1),expect(e.callCount).to.be(1)}),it("returns an instance of Modernizr for chaining",function(){expect(i("fakeDetect",!0)).to.be(n)})}),after(function(){r()})});